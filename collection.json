{
	"info": {
		"_postman_id": "71749657-3cbb-4fa9-ae0e-2e4a3ef2bc7c",
		"name": "ITI Project",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30507912"
	},
	"item": [
		{
			"name": "login",
			"item": [
				{
					"name": "auth token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// verify that status is 200 ok\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//verify that response time less than 2000 ms\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"//set token as environment variable\r",
									"var jsonData = pm.response.json();\r",
									"var token = jsonData.token;\r",
									"pm.environment.set(\"token\", token);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{MyUrl}}/auth",
							"host": [
								"{{MyUrl}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "create booking",
			"item": [
				{
					"name": "create  newbooking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//set id as environment variable\r",
									"//verify that code is 200 ok\r",
									"var newBooking = JSON.parse(responseBody).bookingid;\r",
									"pm.environment.set(\"MyId\", newBooking);\r",
									"\r",
									"\r",
									"//verify that ststus is 200 ok\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// verify a certain string \r",
									"//var AddNeeds = \"Dinner\";\r",
									"//pm.test(\"Check value of additionalneeds\",function(){\r",
									"    //pm.expect(JSON.parse(responseBody).additionalneeds).to.be.equal(AddNeeds)\r",
									"//});\r",
									"// verify that the method is post\r",
									"pm.test(\"verify that the method is post\", function () {\r",
									"    const actualMethod = pm.request.method;\r",
									"    pm.expect(actualMethod).to.eql(\"POST\");\r",
									"});\r",
									"//verify that the responce in json\r",
									"pm.test(\"verify that the responce in json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"// verify that all fields are not null\r",
									"pm.test(\" Check that firstname not equel null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).booking.firstname).to.not.equal(null)\r",
									"});\r",
									"\r",
									"pm.test(\"Check that lastname not equel null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).booking.lastname).to.not.equal(null)\r",
									"});\r",
									"\r",
									"pm.test(\" Check that totalprice not equel null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).booking.totalprice).to.not.equal(null)\r",
									"});\r",
									"\r",
									"pm.test(\"Check that depositpaid not equel null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).booking.depositpaid).to.not.equal(null)\r",
									"});\r",
									"\r",
									"pm.test(\"Check that checkin not equel null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).booking.bookingdates.checkin).to.not.equal(null)\r",
									"});\r",
									"\r",
									"pm.test(\"Check that checkout not equel null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).booking.bookingdates.checkout).to.not.equal(null)\r",
									"});\r",
									"\r",
									"pm.test(\"Check that additionalneeds not equel null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).booking.additionalneeds).to.not.equal(null)\r",
									"});\r",
									"\r",
									"//verify data type of all fields\r",
									"pm.test(\"Check that data type of firstname\",function(){\r",
									"    pm.expect(typeof JSON.parse(responseBody).booking.firstname).to.be.equal(\"string\")\r",
									"});\r",
									"\r",
									"pm.test(\"Check that data type of lastname\",function(){\r",
									"    pm.expect(typeof JSON.parse(responseBody).booking.lastname).to.be.equal(\"string\")\r",
									"});\r",
									"\r",
									"pm.test(\" Check that data type of totalprice\",function(){\r",
									"    pm.expect(typeof JSON.parse(responseBody).booking.totalprice).to.be.equal(\"number\")\r",
									"});\r",
									"\r",
									"pm.test(\"Check that data type of depositpaid\",function(){\r",
									"    pm.expect(typeof JSON.parse(responseBody).booking.depositpaid).to.be.equal(\"boolean\")\r",
									"});\r",
									"\r",
									"pm.test(\"Check that data type of checkin\",function(){\r",
									"    pm.expect(typeof JSON.parse(responseBody).booking.bookingdates.checkin).to.be.equal(\"string\")\r",
									"});\r",
									"\r",
									"pm.test(\"Check that data type of checkout\",function(){\r",
									"    pm.expect(typeof JSON.parse(responseBody).booking.bookingdates.checkout).to.be.equal(\"string\")\r",
									"});\r",
									"\r",
									"pm.test(\"Check that data type of additionalneeds\",function(){\r",
									"    pm.expect(typeof JSON.parse(responseBody).booking.additionalneeds).to.be.equal(\"string\")\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Generate Method To create Random First Name\r",
									"function getRandomFirstName() {\r",
									"  var firstNames = [\"John\", \"Jane\", \"Michael\", \"Emily\", \"David\", \"Sarah\", \"Daniel\", \"Emma\", \"Christopher\", \"Olivia\"];\r",
									"  var randomIndex = Math.floor(Math.random() * firstNames.length);\r",
									"  return firstNames[randomIndex];\r",
									"}\r",
									"pm.collectionVariables.set(\"First_Name\", getRandomFirstName());\r",
									"//------------------------------------------------------------------------------------------\r",
									"//Generate Method To create Random Last Name\r",
									"function getRandomLastName() {\r",
									"  var lastNames = [\"Smith\", \"Johnson\", \"Williams\", \"Brown\", \"Jones\", \"Miller\", \"Davis\", \"Garcia\", \"Wilson\", \"Taylor\"];\r",
									"  var randomIndex = Math.floor(Math.random() * lastNames.length);\r",
									"  return lastNames[randomIndex];\r",
									"}\r",
									"pm.collectionVariables.set(\"Last_Name\", getRandomLastName());\r",
									"//------------------------------------------------------------------------------------------\r",
									"//Generate Method To create Random Total Price\r",
									"function getRandomTotalPrice() {\r",
									"  var min = 100;\r",
									"  var max = 1000;\r",
									"  var randomNumber = Math.floor(Math.random() * (max - min + 1) + min);\r",
									"  return randomNumber;\r",
									"}\r",
									"pm.collectionVariables.set(\"Total_Price\", getRandomTotalPrice());\r",
									"//------------------------------------------------------------------------------------------\r",
									"//Generate Method To Create Random Depositpad\r",
									"function getRandomDepositpad() {\r",
									"  return Math.random() < 0.5;\r",
									"}\r",
									"pm.collectionVariables.set(\"Depositpad\", getRandomDepositpad());\r",
									"//------------------------------------------------------------------------------------------\r",
									"//Generate Method To Create Random Check In Dates\r",
									"function getRandomStartDate() {\r",
									"  const startDate = new Date(\"1990-01-01\");\r",
									"  const endDate = new Date(\"1999-12-31\");\r",
									"  const checkInDate = new Date(startDate.getTime() + Math.floor(Math.random() * (endDate.getTime() - startDate.getTime())));\r",
									"  const formatDate = checkInDate.toISOString().substring(0, 10);\r",
									"  return formatDate;\r",
									"}\r",
									"pm.collectionVariables.set(\"CheckIn\", getRandomStartDate());\r",
									"//------------------------------------------------------------------------------------------\r",
									"//Generate Method To Create Random Check Out Dates\r",
									"function getRandomEndDate() {\r",
									"  const startDate = new Date(\"2000-01-01\");\r",
									"  const endDate = new Date(\"2009-12-31\");\r",
									"  const checkInDate = new Date(startDate.getTime() + Math.floor(Math.random() * (endDate.getTime() - startDate.getTime())));\r",
									"  const formattedCheckInDate = checkInDate.toISOString().substring(0, 10);\r",
									"  return formattedCheckInDate;\r",
									"}\r",
									"pm.collectionVariables.set(\"CheckOut\", getRandomEndDate());\r",
									"//------------------------------------------------------------------------------------------\r",
									"//Generate Method To Create Random Additional Needs\r",
									"function getRandomAdditional() {\r",
									"  var Additional = [\"Breakfast\", \"Lunch\", \"Dinner\"];\r",
									"  var randomIndex = Math.floor(Math.random() * Additional.length);\r",
									"  return Additional[randomIndex];\r",
									"}\r",
									"pm.collectionVariables.set(\"Additional_Needs\", getRandomAdditional());\r",
									"//------------------------------------------------------------------------------------------"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "8538acecfc59a53",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"{{First_Name}}\",\r\n    \"lastname\" : \"{{Last_Name}}\",\r\n    \"totalprice\" : {{Total_Price}},\r\n    \"depositpaid\" : {{Depositpad}},\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{CheckIn}}\",\r\n        \"checkout\" : \"{{CheckOut}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{Additional_Needs}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{MyUrl}}/Booking",
							"host": [
								"{{MyUrl}}"
							],
							"path": [
								"Booking"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Booking",
			"item": [
				{
					"name": "Get All Booking IDs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//verify that response time less than 500ms\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"//verify that ststus is 200 ok\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//verify that method is get\r",
									"pm.test(`verify that method is get`, function () {\r",
									"    const actualMethod = pm.request.method;\r",
									"    pm.expect(actualMethod).to.eql(\"GET\");\r",
									"});\r",
									"//verify that the response is json\r",
									"pm.test(\"heck that Response should be in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{MyUrl}}/Booking",
							"host": [
								"{{MyUrl}}"
							],
							"path": [
								"Booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "get specific id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//verify that code is 200 ok\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//verify that the method is get\r",
									"pm.test(`check that Request method should be GET`, function () {\r",
									"    const actualMethod = pm.request.method;\r",
									"    pm.expect(actualMethod).to.eql(\"GET\");\r",
									"});\r",
									"//verify that the response in json\r",
									"pm.test(\"check that Response should be in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"//verify that response time less than 500ms\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"//Verify that the response contains all the fields.\r",
									"pm.test(\"Booking Folder/Get Specific Booking Request --> Check that responce contains firstname\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"firstname\")\r",
									"});\r",
									"\r",
									"pm.test(\"Booking Folder/Get Specific Booking Request --> Check that responce contains lastname\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"lastname\")\r",
									"});\r",
									"\r",
									"pm.test(\"Booking Folder/Get Specific Booking Request --> Check that responce contains totalprice\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"totalprice\")\r",
									"});\r",
									"\r",
									"pm.test(\"Booking Folder/Get Specific Booking Request --> Check that responce contains depositpaid\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"depositpaid\")\r",
									"});\r",
									"\r",
									"pm.test(\"Booking Folder/Get Specific Booking Request --> Check that responce contains checkin\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).bookingdates).to.have.property(\"checkin\")\r",
									"});\r",
									"\r",
									"pm.test(\"Booking Folder/Get Specific Booking Request --> Check that responce contains checkout\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).bookingdates).to.have.property(\"checkout\")\r",
									"});\r",
									"\r",
									"pm.test(\"Booking Folder/Get Specific Booking Request --> Check that responce contains additionalneeds\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"additionalneeds\")\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"//----------------------------------------------------------------------------------------\r",
									"//Verify that any field in the API response not equel null.\r",
									"//----------------------------------------------------------------------------------------\r",
									"pm.test(\"Check that firstname not equel null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).firstname).to.not.equal(null)\r",
									"});\r",
									"\r",
									"pm.test(\"Check that lastname not equel null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).lastname).to.not.equal(null)\r",
									"});\r",
									"\r",
									"pm.test(\"Check that totalprice not equel null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).totalprice).to.not.equal(null)\r",
									"});\r",
									"\r",
									"pm.test(\"Check that depositpaid not equel null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).depositpaid).to.not.equal(null)\r",
									"});\r",
									"\r",
									"pm.test(\"Check that checkin not equel null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).bookingdates.checkin).to.not.equal(null)\r",
									"});\r",
									"\r",
									"pm.test(\"Check that checkout not equel null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).bookingdates.checkout).to.not.equal(null)\r",
									"});\r",
									"\r",
									"pm.test(\"Check that additionalneeds not equel null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).additionalneeds).to.not.equal(null)\r",
									"});\r",
									"////Verify data type the fields \r",
									"pm.test(\"Booking Folder/Get Specific Booking Request --> Check that data type of firstname\",function(){\r",
									"    pm.expect(typeof JSON.parse(responseBody).firstname).to.be.equal(\"string\")\r",
									"});\r",
									"\r",
									"pm.test(\"Booking Folder/Get Specific Booking Request --> Check that data type of lastname\",function(){\r",
									"    pm.expect(typeof JSON.parse(responseBody).lastname).to.be.equal(\"string\")\r",
									"});\r",
									"\r",
									"pm.test(\"Booking Folder/Get Specific Booking Request --> Check that data type of totalprice\",function(){\r",
									"    pm.expect(typeof JSON.parse(responseBody).totalprice).to.be.equal(\"number\")\r",
									"});\r",
									"\r",
									"pm.test(\"Booking Folder/Get Specific Booking Request --> Check that data type of depositpaid\",function(){\r",
									"    pm.expect(typeof JSON.parse(responseBody).depositpaid).to.be.equal(\"boolean\")\r",
									"});\r",
									"\r",
									"pm.test(\"Booking Folder/Get Specific Booking Request --> Check that data type of checkin\",function(){\r",
									"    pm.expect(typeof JSON.parse(responseBody).bookingdates.checkin).to.be.equal(\"string\")\r",
									"});\r",
									"\r",
									"pm.test(\"Booking Folder/Get Specific Booking Request --> Check that data type of checkout\",function(){\r",
									"    pm.expect(typeof JSON.parse(responseBody).bookingdates.checkout).to.be.equal(\"string\")\r",
									"});\r",
									"\r",
									"pm.test(\"Booking Folder/Get Specific Booking Request --> Check that data type of additionalneeds\",function(){\r",
									"    pm.expect(typeof JSON.parse(responseBody).additionalneeds).to.be.equal(\"string\")\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"//----------------------------------------------------------------------------------------\r",
									"//Verify that value of any field is correct\r",
									"//----------------------------------------------------------------------------------------\r",
									"var fname = pm.collectionVariables.get(\"First_Name\");\r",
									"pm.test(\" Check value of firstname\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).firstname).to.be.equal(fname)\r",
									"});\r",
									"\r",
									"var lname = pm.collectionVariables.get(\"Last_Name\");\r",
									"pm.test(\"Check value of lastname\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).lastname).to.be.equal(lname)\r",
									"});\r",
									"\r",
									"var TPrice = pm.collectionVariables.get(\"Total_Price\");\r",
									"pm.test(\"Check value of totalprice\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).totalprice).to.be.equal(TPrice)\r",
									"});\r",
									"\r",
									"var Dd = pm.collectionVariables.get(\"Depositpad\");\r",
									"pm.test(\"Check value of depositpaid\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).depositpaid).to.be.equal(Dd)\r",
									"});\r",
									"\r",
									"var CIn = pm.collectionVariables.get(\"CheckIn\");\r",
									"pm.test(\"Check value of checkin\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).bookingdates.checkin).to.be.equal(CIn)\r",
									"});\r",
									"\r",
									"var COut = pm.collectionVariables.get(\"CheckOut\");\r",
									"pm.test(\"Check value of checkout\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).bookingdates.checkout).to.be.equal(COut)\r",
									"});\r",
									"\r",
									"var AddNeeds = pm.collectionVariables.get(\"Additional_Needs\");\r",
									"pm.test(\"Check value of additionalneeds\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).additionalneeds).to.be.equal(AddNeeds)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{MyUrl}}/Booking/{{MyId}}",
							"host": [
								"{{MyUrl}}"
							],
							"path": [
								"Booking",
								"{{MyId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "update booking",
			"item": [
				{
					"name": "put update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//verify the code is 200 ok\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//verify response time is less than 500 ms \r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"//verify the method is put\r",
									"pm.test(`check that Request method should be PUT`, function () {\r",
									"    const actualMethod = pm.request.method;\r",
									"    pm.expect(actualMethod).to.eql(\"PUT\");\r",
									"});\r",
									"//verify the response is json\r",
									"pm.test(\"Booking Folder/Update Booking Request --> check that Response should be in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"//verify the response has all fields\r",
									"pm.test(\"Check that responce contains firstname\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"firstname\")\r",
									"});\r",
									"\r",
									"pm.test(\" Check that responce contains lastname\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"lastname\")\r",
									"});\r",
									"\r",
									"pm.test(\" Check that responce contains totalprice\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"totalprice\")\r",
									"});\r",
									"\r",
									"pm.test(\"Check that responce contains depositpaid\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"depositpaid\")\r",
									"});\r",
									"\r",
									"pm.test(\"Check that responce contains checkin\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).bookingdates).to.have.property(\"checkin\")\r",
									"});\r",
									"\r",
									"pm.test(\"Check that responce contains checkout\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).bookingdates).to.have.property(\"checkout\")\r",
									"});\r",
									"\r",
									"pm.test(\"check that responce contains additionalneeds\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"additionalneeds\")\r",
									"});\r",
									"//vreify data type of all fields\r",
									"pm.test(\"Check that data type of firstname\",function(){\r",
									"    pm.expect(typeof JSON.parse(responseBody).firstname).to.be.equal(\"string\")\r",
									"});\r",
									"\r",
									"pm.test(\"Check that data type of lastname\",function(){\r",
									"    pm.expect(typeof JSON.parse(responseBody).lastname).to.be.equal(\"string\")\r",
									"});\r",
									"\r",
									"pm.test(\"Check that data type of totalprice\",function(){\r",
									"    pm.expect(typeof JSON.parse(responseBody).totalprice).to.be.equal(\"number\")\r",
									"});\r",
									"\r",
									"pm.test(\"Check that data type of depositpaid\",function(){\r",
									"    pm.expect(typeof JSON.parse(responseBody).depositpaid).to.be.equal(\"boolean\")\r",
									"});\r",
									"\r",
									"pm.test(\"Check that data type of checkin\",function(){\r",
									"    pm.expect(typeof JSON.parse(responseBody).bookingdates.checkin).to.be.equal(\"string\")\r",
									"});\r",
									"\r",
									"pm.test(\"Check that data type of checkout\",function(){\r",
									"    pm.expect(typeof JSON.parse(responseBody).bookingdates.checkout).to.be.equal(\"string\")\r",
									"});\r",
									"\r",
									"pm.test(\"Check that data type of additionalneeds\",function(){\r",
									"    pm.expect(typeof JSON.parse(responseBody).additionalneeds).to.be.equal(\"string\")\r",
									"});\r",
									"//vreify all fields arent null\r",
									"pm.test(\" Check that firstname not equel null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).firstname).to.not.equal(null)\r",
									"});\r",
									"\r",
									"pm.test(\"Check that lastname not equel null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).lastname).to.not.equal(null)\r",
									"});\r",
									"\r",
									"pm.test(\"that totalprice not equel null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).totalprice).to.not.equal(null)\r",
									"});\r",
									"\r",
									"pm.test(\"Check that depositpaid not equel null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).depositpaid).to.not.equal(null)\r",
									"});\r",
									"\r",
									"pm.test(\"Check that checkin not equel null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).bookingdates.checkin).to.not.equal(null)\r",
									"});\r",
									"\r",
									"pm.test(\"Check that checkout not equel null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).bookingdates.checkout).to.not.equal(null)\r",
									"});\r",
									"\r",
									"pm.test(\"Check that additionalneeds not equel null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).additionalneeds).to.not.equal(null)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Generate Method To create Random First Name\r",
									"function getRandomFirstName() {\r",
									"  var firstNames = [\"John\", \"Jane\", \"Michael\", \"Emily\", \"David\", \"Sarah\", \"Daniel\", \"Emma\", \"Christopher\", \"Olivia\"];\r",
									"  var randomIndex = Math.floor(Math.random() * firstNames.length);\r",
									"  return firstNames[randomIndex];\r",
									"}\r",
									"pm.collectionVariables.set(\"First_Name\", getRandomFirstName());\r",
									"//------------------------------------------------------------------------------------------\r",
									"//Generate Method To create Random Last Name\r",
									"function getRandomLastName() {\r",
									"  var lastNames = [\"Smith\", \"Johnson\", \"Williams\", \"Brown\", \"Jones\", \"Miller\", \"Davis\", \"Garcia\", \"Wilson\", \"Taylor\"];\r",
									"  var randomIndex = Math.floor(Math.random() * lastNames.length);\r",
									"  return lastNames[randomIndex];\r",
									"}\r",
									"pm.collectionVariables.set(\"Last_Name\", getRandomLastName());\r",
									"//------------------------------------------------------------------------------------------\r",
									"//Generate Method To create Random Total Price\r",
									"function getRandomTotalPrice() {\r",
									"  var min = 100;\r",
									"  var max = 1000;\r",
									"  var randomNumber = Math.floor(Math.random() * (max - min + 1) + min);\r",
									"  return randomNumber;\r",
									"}\r",
									"pm.collectionVariables.set(\"Total_Price\", getRandomTotalPrice());\r",
									"//------------------------------------------------------------------------------------------\r",
									"//Generate Method To Create Random Depositpad\r",
									"function getRandomDepositpad() {\r",
									"  return Math.random() < 0.5;\r",
									"}\r",
									"pm.collectionVariables.set(\"Depositpad\", getRandomDepositpad());\r",
									"//------------------------------------------------------------------------------------------\r",
									"//Generate Method To Create Random Check In Dates\r",
									"function getRandomStartDate() {\r",
									"  const startDate = new Date(\"1990-01-01\");\r",
									"  const endDate = new Date(\"1999-12-31\");\r",
									"  const checkInDate = new Date(startDate.getTime() + Math.floor(Math.random() * (endDate.getTime() - startDate.getTime())));\r",
									"  const formatDate = checkInDate.toISOString().substring(0, 10);\r",
									"  return formatDate;\r",
									"}\r",
									"pm.collectionVariables.set(\"CheckIn\", getRandomStartDate());\r",
									"//------------------------------------------------------------------------------------------\r",
									"//Generate Method To Create Random Check Out Dates\r",
									"function getRandomEndDate() {\r",
									"  const startDate = new Date(\"2000-01-01\");\r",
									"  const endDate = new Date(\"2009-12-31\");\r",
									"  const checkInDate = new Date(startDate.getTime() + Math.floor(Math.random() * (endDate.getTime() - startDate.getTime())));\r",
									"  const formattedCheckInDate = checkInDate.toISOString().substring(0, 10);\r",
									"  return formattedCheckInDate;\r",
									"}\r",
									"pm.collectionVariables.set(\"CheckOut\", getRandomEndDate());\r",
									"//------------------------------------------------------------------------------------------\r",
									"//Generate Method To Create Random Additional Needs\r",
									"function getRandomAdditional() {\r",
									"  var Additional = [\"Breakfast\", \"Lunch\", \"Dinner\"];\r",
									"  var randomIndex = Math.floor(Math.random() * Additional.length);\r",
									"  return Additional[randomIndex];\r",
									"}\r",
									"pm.collectionVariables.set(\"Additional_Needs\", getRandomAdditional());\r",
									"//------------------------------------------------------------------------------------------"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "token={{token}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQxMjM=",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"uuuu\",\r\n    \"lastname\" : \"www\",\r\n    \"totalprice\" : 132,\r\n    \"depositpaid\" : false,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2010-04-03\",\r\n        \"checkout\" : \"2012-01-02\"\r\n    },\r\n    \"additionalneeds\" : \"wqqqwe\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{MyUrl}}/booking/{{MyId}}",
							"host": [
								"{{MyUrl}}"
							],
							"path": [
								"booking",
								"{{MyId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//verify the code is 200 ok\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//verify response time is less than 500 ms \r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"//verify the method is put\r",
									"pm.test(`check that Request method should be PUT`, function () {\r",
									"    const actualMethod = pm.request.method;\r",
									"    pm.expect(actualMethod).to.eql(\"PATCH\");\r",
									"});\r",
									"//verify the response is json\r",
									"pm.test(\"Booking Folder/Update Booking Request --> check that Response should be in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"//verify the response has all fields\r",
									"pm.test(\"Check that responce contains firstname\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"firstname\")\r",
									"});\r",
									"\r",
									"pm.test(\" Check that responce contains lastname\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"lastname\")\r",
									"});\r",
									"\r",
									"pm.test(\" Check that responce contains totalprice\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"totalprice\")\r",
									"});\r",
									"\r",
									"pm.test(\"Check that responce contains depositpaid\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"depositpaid\")\r",
									"});\r",
									"\r",
									"pm.test(\"Check that responce contains checkin\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).bookingdates).to.have.property(\"checkin\")\r",
									"});\r",
									"\r",
									"pm.test(\"Check that responce contains checkout\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).bookingdates).to.have.property(\"checkout\")\r",
									"});\r",
									"\r",
									"pm.test(\"check that responce contains additionalneeds\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"additionalneeds\")\r",
									"});\r",
									"//vreify data type of all fields\r",
									"pm.test(\"Check that data type of firstname\",function(){\r",
									"    pm.expect(typeof JSON.parse(responseBody).firstname).to.be.equal(\"string\")\r",
									"});\r",
									"\r",
									"pm.test(\"Check that data type of lastname\",function(){\r",
									"    pm.expect(typeof JSON.parse(responseBody).lastname).to.be.equal(\"string\")\r",
									"});\r",
									"\r",
									"pm.test(\"Check that data type of totalprice\",function(){\r",
									"    pm.expect(typeof JSON.parse(responseBody).totalprice).to.be.equal(\"number\")\r",
									"});\r",
									"\r",
									"pm.test(\"Check that data type of depositpaid\",function(){\r",
									"    pm.expect(typeof JSON.parse(responseBody).depositpaid).to.be.equal(\"boolean\")\r",
									"});\r",
									"\r",
									"pm.test(\"Check that data type of checkin\",function(){\r",
									"    pm.expect(typeof JSON.parse(responseBody).bookingdates.checkin).to.be.equal(\"string\")\r",
									"});\r",
									"\r",
									"pm.test(\"Check that data type of checkout\",function(){\r",
									"    pm.expect(typeof JSON.parse(responseBody).bookingdates.checkout).to.be.equal(\"string\")\r",
									"});\r",
									"\r",
									"pm.test(\"Check that data type of additionalneeds\",function(){\r",
									"    pm.expect(typeof JSON.parse(responseBody).additionalneeds).to.be.equal(\"string\")\r",
									"});\r",
									"//vreify all fields arent null\r",
									"pm.test(\" Check that firstname not equel null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).firstname).to.not.equal(null)\r",
									"});\r",
									"\r",
									"pm.test(\"Check that lastname not equel null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).lastname).to.not.equal(null)\r",
									"});\r",
									"\r",
									"pm.test(\"that totalprice not equel null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).totalprice).to.not.equal(null)\r",
									"});\r",
									"\r",
									"pm.test(\"Check that depositpaid not equel null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).depositpaid).to.not.equal(null)\r",
									"});\r",
									"\r",
									"pm.test(\"Check that checkin not equel null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).bookingdates.checkin).to.not.equal(null)\r",
									"});\r",
									"\r",
									"pm.test(\"Check that checkout not equel null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).bookingdates.checkout).to.not.equal(null)\r",
									"});\r",
									"\r",
									"pm.test(\"Check that additionalneeds not equel null\",function(){\r",
									"    pm.expect(JSON.parse(responseBody).additionalneeds).to.not.equal(null)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Generate Method To Create Random Check In Dates\r",
									"function getRandomStartDate() {\r",
									"  const startDate = new Date(\"1990-01-01\");\r",
									"  const endDate = new Date(\"1999-12-31\");\r",
									"  const checkInDate = new Date(startDate.getTime() + Math.floor(Math.random() * (endDate.getTime() - startDate.getTime())));\r",
									"  const formatDate = checkInDate.toISOString().substring(0, 10);\r",
									"  return formatDate;\r",
									"}\r",
									"pm.collectionVariables.set(\"CheckIn\", getRandomStartDate());\r",
									"//------------------------------------------------------------------------------------------\r",
									"//Generate Method To Create Random Check Out Dates\r",
									"function getRandomEndDate() {\r",
									"  const startDate = new Date(\"2000-01-01\");\r",
									"  const endDate = new Date(\"2009-12-31\");\r",
									"  const checkInDate = new Date(startDate.getTime() + Math.floor(Math.random() * (endDate.getTime() - startDate.getTime())));\r",
									"  const formattedCheckInDate = checkInDate.toISOString().substring(0, 10);\r",
									"  return formattedCheckInDate;\r",
									"}\r",
									"pm.collectionVariables.set(\"CheckOut\", getRandomEndDate());\r",
									"//------------------------------------------------------------------------------------------"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "token={{token}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQxMjM=",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"noha\",\r\n    \"lastname\" : \"mohaddmed\",\r\n    \"totalprice\" : 200,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"didnner\"\r\n}"
						},
						"url": {
							"raw": "{{MyUrl}}/booking/{{MyId}}",
							"host": [
								"{{MyUrl}}"
							],
							"path": [
								"booking",
								"{{MyId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete request",
			"item": [
				{
					"name": "request Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//vreify that code is 201 ok\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"//vreify response time less than 500 ms\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"// vreify that the method is delete\r",
									"pm.test(`check that Request method should be DELETE`, function () {\r",
									"    const actualMethod = pm.request.method;\r",
									"    pm.expect(actualMethod).to.eql(\"DELETE\");\r",
									"});\r",
									"//vreify that the response is in expected format \r",
									"pm.test(\"Booking Folder/Delete Booking Request --> check that Response should be in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"text/plain; charset=utf-8\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Cookie",
								"value": "token={{token}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46cGFzc3dvcmQxMjM=",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{MyUrl}}/booking/{{MyId}}",
							"host": [
								"{{MyUrl}}"
							],
							"path": [
								"booking",
								"{{MyId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "First_Name",
			"value": ""
		},
		{
			"key": "Last_Name",
			"value": ""
		},
		{
			"key": "Total_Price",
			"value": ""
		},
		{
			"key": "Depositpad",
			"value": ""
		},
		{
			"key": "CheckIn",
			"value": ""
		},
		{
			"key": "CheckOut",
			"value": ""
		},
		{
			"key": "Additional_Needs",
			"value": ""
		}
	]
}